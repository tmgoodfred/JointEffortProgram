namespace JointEffortProgram
{
    public partial class Notepad : Form
    {
        DateTime currentDate;
        public Notepad()  //this method is the first thing that runs when the program starts. (after going to Program.cs in the files). Anything you want to happen automatically or during the startup of the app, put here.
        {
            InitializeComponent();  //this is here to basically say "hey, the windows form is created" - this is autogenerated by the project, I didn't add this
            CreateAndUpdateFile();  //this calls the function that I defined down below to create the file.
        }

        //the words in this mean the following:
        //public - it can be called by classes besides this one if needed, the other option is private which means it can only be called in this class
        //async - that means this will run asyncronously, but that's not always needed so can be left out if the method doesn't need it.
        //void - this is the return type. If the method doesn't return a value, it is void. If it returns an int, it will be int instead of void.
        //the following are examples:
        /*
         * public int ReturnANumber()
         * {
         *      return 5; -see how this returns an integer? this could also be: return *intVariableNameHere*;
         * }
         * 
         * int thisWillBeChanged = 5;
         * public void ModifyTheNumber()
         * {
         *      thisWillBeChanged * 2;  //this doesn't *return* a value, instead it modifies an already existing one.
         * }
         * 
         * I will show how these are called below:
         * 
         * int makeThisANumber = ReturnANumber(); -this will set the variable makeThisANumber to the value 5.
         * 
         * ModifyTheNumber(); -this will just complete the action inside the method, so if would change the number from the variable "thisWillBeChanged" to 10 instead of 5.
         * */

        public async void CreateAndUpdateFile()   //this function will create a text file that will save the current date and information related so we don't have to use a database
        {
            DateTime todaysDate = DateTime.Now; //this is a DateTime variable, this specifically handes dates and times. It has a method called "Now" that gets the current date and time.
            string text = todaysDate.ToString();    //this sets a string to the DateTime variable, but you can't just set todaysDate to a string, you have to convert it to a string. This is done with the method ".ToString();"

            if (new FileInfo("date.txt").Length <= 2)   //this will check to see if a file is empty, if it is, we want to create a new file. If not, we only want to read the info from it, not replace it.
            {
                await File.WriteAllTextAsync("date.txt", text + Environment.NewLine); //await works with async, it's not needed if you aren't doing async. But this is creating a new file called date.txt and putting the string into it.
                //the location of this file will be: "C:\Users\***YOURUSERNAMEHERE***\source\repos\JointEffortProgram\JointEffortProgram\bin\Debug\net6.0-windows\date.txt"
                currentDate = todaysDate; //here I am setting the variable currentDate to the date we just got from the method for consistency.
                outputTxt.Text = currentDate.ToString();
            }
            else
            {
                //read the file info, set it to whatever the last date in the file is.
                var data = File.ReadAllLines("date.txt");       //this is an array of all the lines in the text file

                string dateTime = data[data.Length - 1];    //this is the line that has the date time
                string dataEntry = data[data.Length - 2];   //this is the line that has the entry from the text box

                currentDate = DateTime.Parse(dateTime);  //this converts the string to a DateTime and then sets it to our current variable
                noteEntryTxt.Text = dataEntry;  //this sets the info in the text box to the latest entry in the file
                outputTxt.Text = currentDate.ToString();    //this sets the date time text box to the most recent time
            }
        }

        private void refreshFileBtn_Click(object sender, EventArgs e) //this is the action event for when you press the clearfile button
        {
            File.Create("date.txt").Close();    //this clears the contents of the file by overwritting the existing one
            //CreateAndUpdateFile();  //I call the CreateAndUpdateFile method to take our new empty file and get the most up to date time on it.
        }

        private void submitBtn_Click(object sender, EventArgs e)
        {
            //here we want to save the entry text to the file
            if (noteEntryTxt.Text != "" || noteEntryTxt.Text != null)    //here we want to check to make sure the user didn't just put nothing in.
            {
                string textOutput = noteEntryTxt.Text;
                DateTime todaysDate = DateTime.Now;
                File.AppendAllText("date.txt", textOutput + Environment.NewLine);
                File.AppendAllText("date.txt", todaysDate.ToString() + Environment.NewLine);
            }
            else
            {
                noteEntryTxt.Text = "Put something here!";
            }
        }

        private void blankSlateBtn_Click(object sender, EventArgs e)
        {
            noteEntryTxt.Text = ""; //this just sets the text box to empty for the user
        }

        private void refreshDataBtn_Click(object sender, EventArgs e)
        {
            var data = File.ReadAllLines("date.txt");       //this is an array of all the lines in the text file

            string dateTime = data[data.Length - 1];    //this is the line that has the date time
            string dataEntry = data[data.Length - 2];   //this is the line that has the entry from the text box

            currentDate = DateTime.Parse(dateTime);  //this converts the string to a DateTime and then sets it to our current variable
            noteEntryTxt.Text = dataEntry;  //this sets the info in the text box to the latest entry in the file
            outputTxt.Text = currentDate.ToString();    //this sets the date time text box to the most recent time
        }

        private void previousEntryBtn_Click(object sender, EventArgs e)
        {
            //Edward, this is what I want you to work on.
            /*
             * What should happen here is that when you press the button it should go to the last entry in the file IF IT EXISTS.
             * so my hints as to what to do are as follows:
             * make an if/else statement to check to see if the file has more than 5 lines of text.
             * The reason it's 5 is because in the file the first thing that should be there is the DateTime of the file creation.
             * The next 2 items come as a pair and that's the text entry plus the date time of that text entry.
             * so whenever you add an entry, it adds 2 lines. If we're going back into the past, we want at least 2 entries, so those plus the initial line are 5 total.
             * 
             * if there's more than 5, take the line data from the strings and output it!
             */
        }
    }
}