namespace JointEffortProgram
{
    public partial class Form1 : Form
    {
        DateTime currentDate;
        public Form1()  //this method is the first thing that runs when the program starts. (after going to Program.cs in the files). Anything you want to happen automatically or during the startup of the app, put here.
        {
            InitializeComponent();  //this is here to basically say "hey, the windows form is created" - this is autogenerated by the project, I didn't add this
            CreateAndUpdateFile();  //this calls the function that I defined down below to create the file.
        }

        //the words in this mean the following:
        //public - it can be called by classes besides this one if needed, the other option is private which means it can only be called in this class
        //async - that means this will run asyncronously, but that's not always needed so can be left out if the method doesn't need it.
        //void - this is the return type. If the method doesn't return a value, it is void. If it returns an int, it will be int instead of void.
        //the following are examples:
        /*
         * public int ReturnANumber()
         * {
         *      return 5; -see how this returns an integer? this could also be: return *intVariableNameHere*;
         * }
         * 
         * int thisWillBeChanged = 5;
         * public void ModifyTheNumber()
         * {
         *      thisWillBeChanged * 2;  //this doesn't *return* a value, instead it modifies an already existing one.
         * }
         * 
         * I will show how these are called below:
         * 
         * int makeThisANumber = ReturnANumber(); -this will set the variable makeThisANumber to the value 5.
         * 
         * ModifyTheNumber(); -this will just complete the action inside the method, so if would change the number from the variable "thisWillBeChanged" to 10 instead of 5.
         * */

        public async void CreateAndUpdateFile()   //this function will create a text file that will save the current date and information related so we don't have to use a database
        {
            DateTime todaysDate = DateTime.Now; //this is a DateTime variable, this specifically handes dates and times. It has a method called "Now" that gets the current date and time.
            string text = todaysDate.ToString();    //this sets a string to the DateTime variable, but you can't just set todaysDate to a string, you have to convert it to a string. This is done with the method ".ToString();"
            if (new FileInfo("date.txt").Length == 0)   //this will check to see if a file is empty, if it is, we want to create a new file. If not, we only want to read the info from it, not replace it.
            {
                await File.WriteAllTextAsync("date.txt", text); //await works with async, it's not needed if you aren't doing async. But this is creating a new file called date.txt and putting the string into it.
                //the location of this file will be: "C:\Users\***YOURUSERNAMEHERE***\source\repos\JointEffortProgram\JointEffortProgram\bin\Debug\net6.0-windows\date.txt"
                currentDate = todaysDate; //here I am setting the variable currentDate to the date we just got from the method for consistency.
                outputTxt.Text = currentDate.ToString();
            }
            else
            {
                //read the file info, set it to whatever the last date in the file is.
                string lineToParse = File.ReadLines("date.txt").First();    //this takes the first line in the file and then we out it to a string
                currentDate = DateTime.Parse(lineToParse);  //this converts the string to a DateTime and then sets it to our current variable
                outputTxt.Text = currentDate.ToString();
            }

        }

        private void refreshFileBtn_Click(object sender, EventArgs e) //this is the action event for when you press the clearfile button
        {
            File.Create("date.txt").Close();    //this clears the contents of the file by overwritting the existing one
            CreateAndUpdateFile();  //I call the CreateAndUpdateFile method to take our new empty file and get the most up to date time on it.
        }
    }
}